// pub mod animations;

use crate::animations::accelerate::Accelerate;
use crate::entity::time_keeper::TimeKeeper;
use crate::entity::Entity;
use crate::animations::translate::Translate;
use crate::example_animations::dummy_entity;

use std::thread;
use tokio::runtime::Builder;
use tokio::task::JoinSet;


#[derive(Copy, Clone)]
struct Inputs {
    ascii: &'static str,
    // displacement: f32,
    top_left_corner: [f32; 2],
    character_spacing: f32,
    line_spacing: f32,
    approximate_characters_per_line: usize,
}

fn run_bouncing_ball() -> thread::JoinHandle<()> {
    let ascii = r#"
                                                         11111111111111111111111                                                                      
                                                 111110000000000000000000000000000011111                                                              
                                            1111000000000000000000000000000000110000000001111                                                         
                                        111000000000000000000000000011111111111111111111110000111                                                     
                                     1110000000000000000000000000111111111111111111111111111111000111                                                 
                                  1100000000000000000000000000011111111111111111111111111111111111000111                                              
                               110000000000000000000000000000011111111111111111111111111111111111111100011                                            
                            110000000000000000000000000000001111111111111111111111111111111111111111111100011                                         
                          1100000000000000000000000000000000111111111111111111111111111111111111111111111100011                                       
                        11000000000000000000000000000000000111111111111111111111111111111111111111111111111000011                                     
                       10000000000000000000000000000000000011111111111111111111111111111111111111111111111111000011                                   
                     10000000000000000000000000000000000000111111111111111111111111111111111111111111111111111000001                                  
                   110000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110000001                                
                  10000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111100000001                               
                 1000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111100000001                              
                0000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111110000000001                            
              1000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111100000000001                           
              0000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111100000000000                           
             100000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110000000000000                          
            10000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111100000000000001                         
           1000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111110000000000000001                        
           0000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111000000000000000000                        
          100000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111100000000000000000001                       
          000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111100000000000000000000000                       
         10000000000000000000000000000000000000000000000000000000000000000000001111111111111111111100000000000000000000000000001                      
         10000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000001                      
         00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000                      
        1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                     
        1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                     
        1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                     
        1000000000000000000000000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                     
        1000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                     
        100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000                      
         10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                      
         10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                      
          000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000                       
          100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                       
          100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                       
           1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                        
            10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                         
            10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                         
             100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                          
              1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                           
               10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                            
                100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                             
                 110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                               
                   100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                                
                    1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                                 
                     1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                                   
                       10000000000000000000000000000000000000000000000000000000000000000000000000000000000000001                                     
                         10000000000000000000000000000000000000000000000000000000000000000000000000000000000001                                       
                           11000000000000000000000000000000000000000000000000000000000000000000000000000000001                                         
                             10000000000000000000000000000000000000000000000000000000000000000000000000011                                           
                               11000000000000000000000000000000000000000000000000000000000000000000000011                                             
                                111000000000000000000000000000000000000000000000000000000000000000011                                                
                                    11110000000000000000000000000000000000000000000000000000000011                                            
                                       11111100000000000000000000000000000000000000000000000011                                      
                                            11111000000000000000000000000000000000000001                            
                                                 1111110000000000000000000000000000                                                                                
"#;
    let inputs = Inputs {
        ascii,
        // displacement: 2500.0,
        top_left_corner:  [200.0, 800.0],
        character_spacing: 5.0,
        line_spacing: 10.0,
        approximate_characters_per_line: 300,
    };

    spawn_entities_from_ascii(inputs)
}


fn spawn_entities_from_ascii(inputs: Inputs) -> thread::JoinHandle<()> {
    let mut dummy = dummy_entity();
    
    let handle: thread::JoinHandle<()> = thread::spawn(move || {    //tokio runtime
        let rt = Builder::new_current_thread().enable_all().build().expect("Failed to build Tokio runtime");
        rt.block_on(async {
            let mut set = JoinSet::new();
            let mut time_keeper = TimeKeeper::new();
            dummy.wait(1000, &mut time_keeper).await;
         
            let mut character = 0.0;
            let mut line = 0.0;
            let mut colors: Vec<[f32; 3]> = vec![];
            for i in 0..inputs.approximate_characters_per_line {
                let current_entity_color_g = i as f32 / inputs.approximate_characters_per_line as f32;
                colors.push([0.0, current_entity_color_g, 0.5]);
            }

            let mut character_codes: Vec<u32> = vec![];
            for c in inputs.ascii.chars() {
                let mut found = false;
                if !character_codes.contains(&(c as u32)) {
                    character_codes.push(c as u32);
                    found = true;
                }
                if !found {
                    character_codes.push(c as u32);
                }
                if c == ' ' {
                    character += 1.0;
                    continue;
                }
                if (c as u32 == 10) || (c == '\n') {
                    line += 1.0;
                    character = 0.0;
                    continue;
                }
                let color = colors[character as usize];
                let position = [inputs.top_left_corner[0] + (character * inputs.character_spacing), inputs.top_left_corner[1] - (line * inputs.line_spacing)];
                let duration = 1000;
                let mut time_keeper_clone = time_keeper.clone();
                let mut dummy = dummy_entity();
                set.spawn(async move {
                    for _i in 0..100 {
                    entity_action(c, line, color, position, duration, &mut time_keeper_clone).await;
                    dummy.wait(1000, &mut time_keeper_clone).await;
                    }
                });
                character += 1.0;
            }
            while let Some(_res) = set.join_next().await {};
        });
    });
    handle
}

async fn entity_action(character: char, line: f32, color: [f32; 3], position: [f32; 2], duration: i32, time_keeper: &mut TimeKeeper) {
    let ent: Entity = Entity::new(position, 200.0, character, color);
    let mut bounce_height = 270.0;
    let mut duration = duration;
    let mut ent2: Entity = Translate::new_entity(ent, duration, [position[0], position[1] - bounce_height]);
    let floor = position[1] - bounce_height;
    ent2.run_and_wait(time_keeper).await;
    let mut squish_amount;
    let mut squish_duration;
    if line == 0.0 {
        // let line = 1.0;
    }
    for _i in 0..10 {
        // squish
        squish_amount = (bounce_height * 0.20) + (0.7*bounce_height/line.powf(0.3));
        squish_duration = duration / 2;
        let mut ent4 = Translate::new_entity(ent2, squish_duration, [position[0] + 1.0, floor - squish_amount]);
        ent4.run_and_wait(time_keeper).await;
        let mut ent5 = Translate::new_entity(ent4, squish_duration / 2, [position[0] - 1.0, floor]);
        ent5.run_and_wait(time_keeper).await;

        // bounce up
        bounce_height *= 0.7;
        duration = (duration as f32 * 0.8) as i32;
        let mut ent3: Entity = Translate::new_entity(ent5, duration, [position[0], floor + bounce_height]);
        ent3.run_and_wait(time_keeper).await;

        // fall to ground
        ent2 = Translate::new_entity(ent3, duration, [position[0], floor]);
        ent2 = Accelerate::new_entity(ent2, 2.0);
        ent2.run_and_wait(time_keeper).await;
    }
}


// ------------------- PRESENTATION TEST ------------------- //
pub fn run() -> thread::JoinHandle<()>  {
    let handle: thread::JoinHandle<()> = thread::spawn(move || {    //tokio runtime
        let rt = Builder::new_current_thread().enable_all().build().expect("Failed to build Tokio runtime");
        rt.block_on(async {
            let mut set: JoinSet<()> = JoinSet::new();
            
            set.spawn(async move {
                run_bouncing_ball();
            });
            
            while let Some(_res) = set.join_next().await {}; //no clue it crashes
        });
    });
    handle
}